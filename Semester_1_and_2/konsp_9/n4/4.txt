g++ -pthread main.cc -o isp && sudo ./isp 1 Name

15)при объявлении функции main, вы должны использовать int argc для представления количества аргументов командной строки и char *argv[] для представления самих аргументов.
18)malloc(STACK_SIZE);`: Функция `malloc` резервирует участок памяти заданного размера (в данном случае 65536 байт) и возвращает указатель на начало этой зарезервированной области памяти. Это будет использоваться как стек для дочернего процесса.
19)void *child_stack = malloc(STACK_SIZE); Тип `void *` обозначает указатель на неопределенный тип данных, что позволяет использовать этот указатель для работы с данными любого типа.

20)char *new_hostname = argv[1];: Создает указатель new_hostname, который указывает на второй аргумент командной строки (новый hostname).
23)  "argv" представляет собой массив строк, где argv[0] содержит имя самой программы, 
а последующие элементы (argv[1], argv[2], и так далее) содержат аргументы, переданные из командной строки при запуске программы.

30)Эта строка представляет собой вызов функции clone, используемой для создания нового процесса в языках программирования C и C++. 
Давайте разберем каждый аргумент в этом вызове:
1. childFunc - это указатель на функцию, которая будет запущена в созданном процессе. Таким образом, при создании нового процесса, 
он будет начинаться с выполнения этой функции.
2. (char*)child_stack + STACK_SIZE - это указатель на начало стека для нового процесса. Обратите внимание, 
что прибавляемое значение STACK_SIZE используется для указания стека вниз (т.е. в сторону уменьшения адресов). 
Это позволяет создать стек в обратной части выделенной памяти.
3. CLONE_NEWUTS | SIGCHLD - это флаги, управляющие поведением создаваемого процесса. 
CLONE_NEWUTS указывает на создание нового пространства имен UTS (включая имя узла), а SIGCHLD указывает, 
что родитель будет получать сигнал SIGCHLD, когда дочерний процесс завершится

42)free(child_stack);: Освобождает выделенную ранее память для стека дочернего процесса.
